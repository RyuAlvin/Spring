<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--Singleton：
        当一个bean的作用域为Singleton，那么Spring IoC容器中只会存在一个共享的bean实例，
            并且所有对bean的亲故，只要id与该bean定义相匹配，则只会返回bean的同一实例。
        Singleton是单例类型，就是在创建容器时就同时自动创建了一个bean的对象，
            不管你是否使用，它都存在了，每次获取到的对象都是同一个对象。
        注意：Singleton作用域是Spring中的缺省作用域。要在xml中将bean定义成singleton，可以进行如下配置：-->
    <bean id="addrSingleton" class="cn.di.pojo.Address" scope="singleton"/>

    <!--Prototype：
        当一个bean的作用域为Prototype，表示一个bean定义对应多个对象实例。
        Prototype作用域的bean会导致在每次对该bean请求（将其注入到另一个bean中，或者以程序的方式调用容器的getBean()方法）时都会创建一个新的bean实例。
        Prototype是原型类型，它在我们创建容器的时候并没有实例化，而是当我们获取bean的时候才回去创建一个对象，
            而且我们每次获取到的对象都不是同一个对象。
        根据经验，对有状态的bean应该使用prototype作用域，而对无状态的bean则应该使用singleton作用域。-->
    <bean id="accountPrototype" class="cn.di.pojo.Account" scope="prototype"/>

    <!--Request：
        当一个bean的作用域为Request，表示在一次Http请求中，一个bean定义对应一个实例；
            即每个Http请求都会有各自的bean实例，它们依据某个bean定义创建而成。
        该作用域仅在基于web的Spring AppilcationContext情形下有效-->
    <bean id="helloControllerRequest" class="cn.di.controller.HelloController" scope="request"/>

    <!--Session
        当一个bean的作用域为Session，表示在一个Http Session中，一个bean定义对应一个实例。
        该作用域仅在基于web的Spring ApplicationContext情形下有效。

        针对某个Http Session，Spring容器会根据定义创建一个全新的userSession实例，
            且该userSession实例仅在当前Http Session内有效。
            与Request作用域一样，可以根据需要放心的更改所创建实例的内部状态，
            而别的Http Session中根据userSession创建的实例，将不会看到这些特定于某个Http Session的状态变化。
            当Http Session最终被废弃的时候，在该Http Session作用域内的bean也会被废弃掉。-->
    <bean id="userSession" class="cn.di.pojo.User" scope="session"/>
</beans>